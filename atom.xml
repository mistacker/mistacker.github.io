<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mistacker|博客</title>
  
  <subtitle>孤帆远影碧空尽，唯见长江天际流。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-28T14:47:47.849Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>mistacker</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nginx的使用</title>
    <link href="http://yoursite.com/2018/09/28/nginx/"/>
    <id>http://yoursite.com/2018/09/28/nginx/</id>
    <published>2018-09-28T14:47:47.889Z</published>
    <updated>2018-09-28T14:47:47.849Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是Nginx"><a href="#什么是Nginx" class="headerlink" title="什么是Nginx?"></a>什么是Nginx?</h4><p>Nginx是一款自由的、开源的、高性能的HTTP服务器和反向代理服务器；同时也是一个IMAP、POP3、SMTP代理服务器；Nginx可以作为一个HTTP服务器进行网站的发布处理，另外nginx可以作为反向代理进行负载均衡；支持高并发，并且消耗资源非常低，运行非常稳定。</p><p>由于nginx的优点，促使它快速成为使用广泛的http服务器，这里主要介绍一下nginx的使用及配置(ubuntu下)。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure><p>nginx安装完后，默认时启动的，可以通过：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux | grep nginx</span><br></pre></td></tr></table></figure></p><p>来查看nginx是否启动。如果是下面这种情况即是启动：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root       881  0.0  0.0 140620  1512 ?        Ss   20:12   0:00 nginx: master process /usr/sbin/nginx -g daemon on; master_process on;</span><br><span class="line">www-data   882  0.0  0.0 143240  6252 ?        S    20:12   0:00 nginx: worker process</span><br><span class="line">www-data   883  0.0  0.0 143240  6252 ?        S    20:12   0:00 nginx: worker process</span><br><span class="line">www-data   884  0.0  0.0 143240  6252 ?        S    20:12   0:00 nginx: worker process</span><br><span class="line">www-data   885  0.0  0.0 143240  6252 ?        S    20:12   0:00 nginx: worker process</span><br><span class="line">mistack+  5146  0.0  0.0  21536  1088 pts/0    S+   20:53   0:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure></p><p>如果没有启动，可通过下面命令来启动，已启动可重启、或停止：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/nginx start    <span class="comment"># 启动</span></span><br><span class="line">sudo /etc/init.d/nginx restart    <span class="comment"># 重启</span></span><br><span class="line">sudo /etc/init.d/nginx stop    <span class="comment"># 停止</span></span><br></pre></td></tr></table></figure></p><p>打开浏览器，访问localhost，可以看到如下内容：<br><img src="/images/nginx.png" alt=""><br>即nginx安装并启动成功。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>nginx默认配置文件在 <code>/etc/nginx/conf.d/default.conf</code>。我们可以删除默认配置文件在该文件夹下新建一个 <code>nginx.conf</code> 的配置文件。由于nginx支持的功能很多，我们逐一配置，皆存放在<code>nginx.conf</code>中。每次更改了配置信息，需要重新启动nginx服务器才能生效。</p><h3 id="静态http服务器"><a href="#静态http服务器" class="headerlink" title="静态http服务器"></a>静态http服务器</h3><blockquote><p>ngin可以将服务器上的静态文件，通过http协议展现给客户端浏览器：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen    80;    <span class="comment"># 监听端口</span></span><br><span class="line">    location / &#123;</span><br><span class="line">        root /usr/share/nginx/html;    <span class="comment"># 静态文件路径，也是默认路径</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="反向代理服务器"><a href="#反向代理服务器" class="headerlink" title="反向代理服务器"></a>反向代理服务器</h3><blockquote><p>nginx可以实现反向代理，客户端可以访问nginx，然后由nginx去访问web服务器，把服务器返回的数据再返回给客户端。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen    80;    <span class="comment"># 监听端口</span></span><br><span class="line">    location / &#123;</span><br><span class="line">proxy_pass http://192.168.0.100:8000;  <span class="comment"># 应用服务器HTTP地址</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><blockquote><p>当一个网站有很多访问量时，一台服务器往往会压力过大，容易崩溃；为了解决这个问题，nginx提供了负载均衡—-即配置多个相同的服务器分担压力，一旦其中一个挂掉，页不会影响用户的访问。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">upstream app &#123;</span><br><span class="line">    server    192.168.0.100:8000;    <span class="comment"># 服务器1</span></span><br><span class="line">    server    192.168.0.200:8000;    <span class="comment"># 服务器2</span></span><br><span class="line">    server    192.168.0.250:8000;    <span class="comment"># 服务器3</span></span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen    80;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass  http://app;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h3><blockquote><p>有的网站，访问量不多，而要节约成本，需要将多个网站部署到同一台服务器上。这种技术叫做虚拟主机。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen    80;</span><br><span class="line">    server_name    www.aaa.com;    <span class="comment"># www.aaa.com域名</span></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://localhost:8000;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen    80;</span><br><span class="line">    server_name    www.bbb.com;    <span class="comment"># www.bbb.com域名</span></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://localhost:8001;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="uwsgi"><a href="#uwsgi" class="headerlink" title="uwsgi"></a>uwsgi</h3><blockquote><p>nginx本身不支持动态网页，但是它可以通过uwsgi来将请求扔给某些语言或框架处理(例如：PHP/Python/Perl等)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">upstream  app &#123;</span><br><span class="line">    server localhost:5000;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen    80;</span><br><span class="line">    server_name    127.0.0.1;</span><br><span class="line">    </span><br><span class="line">    location / &#123;</span><br><span class="line">        include uwsgi_params;</span><br><span class="line">        uwsgi_read_timeout    3600;</span><br><span class="line">        uwsgi_pass    app;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>更多配置信息请见 <a href="http://www.nginx.cn/doc/" target="_blank" rel="noopener">Nginx中文文档</a></p>]]></content>
    
    <summary type="html">
    
      nginx作为web服务器时下还是非常流行的，主要介绍下nginx的常用配置。如需更多配置设置，请详阅官方文档。
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>测试test文件</title>
    <link href="http://yoursite.com/2018/09/27/test/"/>
    <id>http://yoursite.com/2018/09/27/test/</id>
    <published>2018-09-27T12:51:41.481Z</published>
    <updated>2018-09-27T12:51:41.449Z</updated>
    
    <content type="html"><![CDATA[<p>这是测试内容</p><blockquote><p>先看看这个是否有效果显示<br>该文章是开启评论的</p></blockquote><p>这是运行的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install python3</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      这是该测试页面的描述，随便写的东西，只是为了让页面显示，看其作用。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/09/27/hello-world/"/>
    <id>http://yoursite.com/2018/09/27/hello-world/</id>
    <published>2018-09-27T08:49:33.590Z</published>
    <updated>2018-09-27T08:49:33.562Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
